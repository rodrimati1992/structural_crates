(
  cases:[
    (
      name:"access modifiers",
      code:r##"
        trait Trait{
          #r0 hi:u32,
        }
      "##,
      subcase: [
        ( replacements: { "#r0":"ooh" }, error_count: 1 ),
        ( 
          replacements: { "#r0":"" },
          find_all:[not(regex("GetField *<")),not(str("GetFieldMut")),str("IntoFieldMut")], 
          error_count: 0,
        ),
        ( 
          replacements: { "#r0":"ref" },
          find_all:[regex("GetField *<"),not(str("GetFieldMut")),not(str("IntoField"))], 
          error_count: 0,
        ),
        ( 
          replacements: { "#r0":"mut" },
          find_all:[not(regex("GetField *<")),str("GetFieldMut"),not(str("IntoField"))], 
          error_count: 0,
        ),
        // shared and by value access
        ( 
          replacements: { "#r0":"move" },
          find_all:[not(regex("GetField *<")),not(str("GetFieldMut")),regex("IntoField *<")], 
          error_count: 0,
        ),
        ( 
          replacements: { "#r0":"mut move" },
          find_all:[not(regex("GetField *<")),not(str("GetFieldMut")),str("IntoFieldMut")], 
          error_count: 0,
        ),
      ],
    ),
    (
      name:"attributes",
      code:r##"
        #r0
        trait Trait{
          hi:u32,
        }
      "##,
      subcase: [
        ( 
          replacements: { "#r0":"///what are you" },
          find_all:[str("what are you")], 
          error_count: 0,
        ),
        ( 
          replacements: { "#r0":"#[inline]" },
          find_all:[regex(r##"# *\[ *inline *\].*trait *Trait"##)], 
          error_count: 0,
        ),
      ],
    ),
    (
      name:"trait privacy",
      code:r##"
        #r0 trait Trait{
          hi:u32,
        }
      "##,
      subcase: [
        ( 
          replacements: { "#r0":"pub" },
          find_all:[regex(r##"pub *trait *Trait"##)], 
          error_count: 0,
        ),
        ( 
          replacements: { "#r0":"pub(crate)" },
          find_all:[regex(r##"pub *\( *crate *\) *trait *Trait"##)], 
          error_count: 0,
        ),
      ],
    ),
    (
      name:"field privacy",
      code:r##"
        trait Trait{
          #r0 hi:u32,
        }
      "##,
      subcase: [
        ( 
          replacements: { "#r0":"" },
          error_count: 0,
        ),
        ( 
          replacements: { "#r0":"pub" },
          error_count: 1,
        ),
        ( 
          replacements: { "#r0":"pub(crate)" },
          error_count: 1,
        ),
      ],
    ),
    (
      name:"no_docs",
      code:r##"
        #[struc(#0)]
        #v trait Trait{
            a:u32,
            b:u32,
            c:u32,
        }
      "##,
      subcase: [
        (
          replacements: { "#0":"no_docs", "#v":"pub" },
          find_all:[
            not(regex(r#"FP *! *\( *a *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *b *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *c *\) *, *Ty *= *u32"#)),
          ],
          error_count: 0,
        ),
        (
          replacements: { "#0":"", "#v":"pub(crate)" },
          find_all:[
            not(regex(r#"FP *! *\( *a *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *b *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *c *\) *, *Ty *= *u32"#)),
          ],
          error_count: 0,
        ),
        (
          replacements: { "#0":"", "#v":"pub" },
          find_all:[
            regex(r#"FP *! *\( *a *\) *, *Ty *= *u32"#),
            regex(r#"FP *! *\( *b *\) *, *Ty *= *u32"#),
            regex(r#"FP *! *\( *c *\) *, *Ty *= *u32"#),
          ],
          error_count: 0,
        ),
      ],
    ),
    (
      name:"repeated-top",
      code:r##"
        pub trait Trait{
          hi:u32,
          #f:u32,
          Foo,
          #v,
        }
      "##,
      subcase: [
        ( 
          replacements: { "#f":"goodbye", "#v":"Bar" },
          error_count: 0,
        ),
        ( 
          replacements: { "#f":"hi", "#v":"Bar" },
          find_all:[ regex("Cannot.*field") ],
          error_count: 1,
        ),
        ( 
          replacements: { "#f":"goodbye", "#v":"Foo" },
          find_all:[ regex("Cannot.*variant") ],
          error_count: 1,
        ),
      ],
    ),
    (
      name:"repeated in variant",
      code:r##"
        pub trait Trait{
          Foo{
            hi:u32,
            #f:u32,
          }
        }
      "##,
      subcase: [
        ( 
          replacements: { "#f":"goodbye" },
          error_count: 0,
        ),
        ( 
          replacements: { "#f":"hi" },
          find_all:[ regex("Cannot.*field") ],
          error_count: 1,
        ),
      ],
    ),

  ]
)
