(
  cases:[
    (
      name:"access attribute",
      code:r##"
        #[struc(access="#replaced")]
        struct Huh{
            pub a:u32,
        }
      "##,
      subcase: [
        ( replacements: { "#replaced":"ooh" }, error_count: 1 ),
        ( replacements: { "#replaced":"ref" }, error_count: 0 ),
        ( replacements: { "#replaced":"mut" }, error_count: 0 ),
        ( replacements: { "#replaced":"move" }, error_count: 0 ),
      ],
    ),
    (
      name:"replace bounds struct",
      code:r##"
        #[struc(#0)]
        struct Huh{
            #[struc(#1)]
            pub a:u32,
        }
      "##,
      subcase: [
        ( replacements: { "#0":"replace_bounds=\"Trait\"", "#1":"", }, error_count: 1 ),
        ( replacements: { "#0":"", "#1":"replace_bounds=\"Trait\"", }, error_count: 1 ),
      ],
    ),
    (
      name:"delegate_to",
      code:r##"
        struct Huh<T,U>{
            #[struc(#r0)]
            pub a:T,
            #[struc(#r1)]
            pub b:U,
        }
      "##,
      subcase: [
        ( replacements: { "#r0":"", "#r1":"" }, error_count: 0 ),
        ( replacements: { "#r0":"delegate_to", "#r1":"" }, error_count: 0 ),
        ( replacements: { "#r0":"", "#r1":"delegate_to" }, error_count: 0 ),
        (
          replacements: { "#r0":"delegate_to", "#r1":"delegate_to" }, 
          find_all:[regex("Cannot.*delegate_to.*field")], 
          error_count: 1
        ),
      ],
    ),
    (
      name:"rename attribute",
      code:r##"
        struct Huh{
            #[struc(rename="#replaced")]
            pub original:u32,
        }
      "##,
      subcase: [
        (
          replacements: { "#replaced":"hello" },
          find_all:[str("STR_hello"),regex("original *: *u32")], 
          error_count: 0,
        ),
        (
          replacements: { "#replaced":"world" },
          find_all:[str("STR_world"),regex("original *: *u32")], 
          error_count: 0,
        ),
        (
          replacements: { "#replaced":"0" },
          find_all:[str("STR_0"),regex("original *: *u32")], 
          error_count: 0,
        ),
      ],
    ),
    (
      name:"valid_path_attributes",
      code:r##"
        #[struc(#replaced)]
        struct Huh{
            pub a:u32,
        }
      "##,
      subcase: [
        ( replacements: { "#replaced":"ooh" }, error_count: 1 ),
        ( replacements: { "#replaced":"yeah" }, error_count: 1 ),
        ( replacements: { "#replaced":"public" }, error_count: 0 ),
        ( replacements: { "#replaced":"not_public" }, error_count: 0 ),
        ( replacements: { "#replaced":"private" }, error_count: 0 ),
      ],
    ),
    (
      // This test checks that,if a field is private,
      // that accessor trait impls aren't generated.
      //
      // If private fields start being outputted from the derive macro,
      // this'll have to change.
      name:"single field and accessors",
      code:r##"
        struct Huh{
          #p0 hello:u32,
          pub world:u64,
          #p0 dino:String,
        }
      "##,
      subcase: [
        ( 
          replacements: { "#p0":"" },
          find_all:[not(str("hello")),str("world"),not(str("dino"))],
          error_count: 0,
        ),
        ( 
          replacements: { "#p0":"pub " },
          find_all:[str("hello"),str("world"),str("dino")],
          error_count: 0,
        ),
        ( 
          replacements: { "#p0":"#[struc(public)]" },
          find_all:[str("hello"),str("world"),str("dino")],
          error_count: 0,
        ),
      ],
    ),
    (
      name:"variant count alias struct",
      code:r##"
        #[struc(variant_count_alias)]
        struct Huh;
      "##,
      subcase: [
        ( replacements: {}, error_count: 1 ),
      ],
    ),
    (
      name:"variant count alias enum",
      code:r##"
        #[struc(variant_count_alias)]
        #vis enum Enum{
          Foo
        }
      "##,
      subcase: [
        (
          replacements: { "#vis":"pub" },
          find_all:[regex(r#"pub +type *Enum_VC"#)],
          error_count: 0,
        ),
        (
          replacements: { "#vis":"pub(self)" },
          find_all:[regex(r#"pub *\( *self *\) *type *Enum_VC"#)],
          error_count: 0,
        ),
      ],
    ),
    (
      name:"no_docs",
      code:r##"
        #[struc(#0)]
        #v struct Hello{
            pub a:u32,
            pub b:u32,
            #[struc(rename="c")]
            pub ee:u32,
        }
      "##,
      subcase: [
        (
          replacements: { "#0":"no_docs", "#v":"pub" },
          find_all:[
            not(regex(r#"FP *! *\( *a *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *b *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *\\"c\\" *\) *, *Ty *= *u32"#)),
          ],
          error_count: 0,
        ),
        (
          replacements: { "#0":"", "#v":"pub(crate)" },
          find_all:[
            not(regex(r#"FP *! *\( *a *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *b *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *\\"c\\" *\) *, *Ty *= *u32"#)),
          ],
          error_count: 0,
        ),
        (
          replacements: { "#0":"", "#v":"pub" },
          find_all:[
            regex(r#"FP *! *\( *a *\) *, *Ty *= *u32"#),
            regex(r#"FP *! *\( *b *\) *, *Ty *= *u32"#),
            regex(r#"FP *! *\( *\\"c\\" *\) *, *Ty *= *u32"#),
            regex(r#"named `ee` in"#),
          ],
          error_count: 0,
        ),
      ],
    ),
    (
      name:"no_docs",
      code:r##"
        #[struc(#0)]
        #v struct Hello{
            pub a:u32,
            pub b:u32,
            pub c:u32,
        }
      "##,
      subcase: [
        (
          replacements: { "#0":"", "#v":"pub(crate)" },
          find_all:[
            not(regex(r#"FP *! *\( *a *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *b *\) *, *Ty *= *u32"#)),
            not(regex(r#"FP *! *\( *c *\) *, *Ty *= *u32"#)),
          ],
          error_count: 0,
        ),
      ],
    )
    
  ]
)
